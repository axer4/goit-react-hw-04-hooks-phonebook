{"version":3,"sources":["components/ContactList/ContactForm/ContactFrom.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactList/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","App.module.css"],"names":["ContactForm","className","styles","form","type","name","pattern","title","required","onChange","this","props","onChangeInputHandler","input","button","onClick","addContactHandler","Component","ContactList","filteredContacts","deleteContact","list","map","contact","item","number","id","Filter","filter","handleFilterChange","label","heading","autoComplete","value","PhoneBook","useState","saved","localStorage","getItem","JSON","parse","contacts","setContacts","setName","setNumber","setFilter","dublicateAlert","find","toLowerCase","alert","useEffect","setItem","stringify","includes","event","target","e","uuidv4","ReactDOM","render","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.e84317da.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport styles from './ContactForm.module.css'\r\nimport PropTypes from 'prop-types';\r\nexport default class ContactForm extends Component {\r\n  render() {\r\n    return <>\r\n          <form className = {styles.form}>\r\n        <label>\r\n      <h3>Name</h3>\r\n      <input\r\n  type=\"text\"\r\n  name=\"name\"\r\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n            onChange={this.props.onChangeInputHandler}\r\n            className = {styles.input}\r\n      /></label>\r\n               <label>\r\n          <h3>Tel. number </h3>\r\n          <input\r\n  type=\"tel\"\r\n  name=\"number\"\r\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            \r\n            required\r\n            onChange={this.props.onChangeInputHandler}\r\n            className = {styles.input}\r\n          /></label>\r\n        <button type=\"button\" className={styles.button} onClick={this.props.addContactHandler}>Add Contact</button>\r\n      </form></>\r\n} }\r\n\r\nContactForm.propTypes = {\r\n  addContactHandler: PropTypes.func,\r\n  onChangeInputHandler: PropTypes.func,\r\n}","import styles from './ContactList.module.css'\r\nimport PropTypes from 'prop-types';\r\nfunction ContactList({ filteredContacts, deleteContact }) {\r\n    return (<ul className = {styles.list}>\r\n        {filteredContacts.map(contact => <li key={contact.id} className = {styles.item}>{contact.name} : {contact.number}\r\n            <button onClick={() => deleteContact(contact.id)} className = {styles.button}> Delete </button>\r\n        </li>)}\r\n    </ul> )\r\n}\r\n\r\nContactList.propTypes = {\r\n    filteredContacts: PropTypes.array,\r\n    deleteContact: PropTypes.func\r\n}\r\n    \r\nexport default ContactList;","import styles from './Filter.module.css'\r\nimport PropTypes from 'prop-types';\r\nexport default function Filter({ filter, handleFilterChange }) {\r\n     return <label className = {styles.label}>\r\n                <h3 className = {styles.heading}>Find contacts by name</h3> \r\n            <input\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                autoComplete=\"off\"\r\n                onChange = {handleFilterChange}\r\n             value={filter}\r\n             className = {styles.input}\r\n         >\r\n            </input>\r\n            </label>\r\n}\r\nFilter.propTypes = {\r\n    filter: PropTypes.string,\r\n    handleFilterChange:PropTypes.func,\r\n}","import { v4 as uuidv4 } from 'uuid';\r\nimport ContactForm from \"./components/ContactList/ContactForm/ContactFrom\";\r\nimport ContactList from \"./components/ContactList/ContactList\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport styles from './App.module.css'\r\nimport { useEffect, useState } from 'react';\r\nexport default function PhoneBook() {\r\n  const [contacts, setContacts] = useState(() => {\r\n    const saved = localStorage.getItem('contacts')\r\n    return JSON.parse(saved);\r\n  })\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [filter, setFilter] = useState('');\r\n  const onChangeInputHandler = (event) => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name': setName(value);\r\n        break;\r\n      case 'number': setNumber(value);\r\n        break;\r\n    }\r\n  }\r\n  const addContactHandler = e => {\r\n    if (dublicateAlert(name)) {\r\n      return\r\n    }\r\n    else {\r\n      setContacts([...contacts, { name: name, number: number,id : uuidv4() }])\r\n    }\r\n  }\r\n  const handleFilterChange = (e) => {\r\n    setFilter(e.target.value)\r\n  }\r\n  const dublicateAlert = (name) => {\r\n    if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\r\n      alert(`${name} is already in contacts`)\r\n      return true\r\n    }\r\n  }\r\n\r\n  const deleteContact = (id) => {\r\n    setContacts(contacts.filter(contact => contact.id !== id))\r\n  }\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  })\r\n      const filteredContacts = contacts.filter(contact => {\r\n        return contact.name.toLowerCase().includes(filter.toLowerCase());\r\n      })\r\n  return <>\r\n    <h1 className={styles.heading} >PhoneBook</h1>\r\n    <ContactForm\r\n      onChangeInputHandler={onChangeInputHandler}\r\n      addContactHandler={addContactHandler}\r\n    />\r\n     <h3 className={styles.heading}>Contacts</h3>\r\n    <Filter\r\n      filter={filter}\r\n      handleFilterChange={handleFilterChange}\r\n    />\r\n   <ContactList\r\n      filteredContacts={filteredContacts}\r\n      deleteContact={deleteContact}\r\n    />\r\n  </>\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PhoneBook from './App';\r\n\r\nReactDOM.render(<PhoneBook/>,document.querySelector('#root'))\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1oZUX\",\"button\":\"ContactForm_button__3deV2\",\"input\":\"ContactForm_input__7mGQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2fW1a\",\"item\":\"ContactList_item__1ts1C\",\"button\":\"ContactList_button__3gABi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Filter_heading__2u_MK\",\"input\":\"Filter_input__2DULL\",\"label\":\"Filter_label__1FJyd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"App_heading__15kTF\"};"],"sourceRoot":""}